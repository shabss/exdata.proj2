
library(data.table)
library(ggplot2)

#LoadData : Load NEI and SCC data into global variables if not already present.
#           These variables are then accessed by plot functions.
#           NEI and SCC are loaded as data.table class.
#           If data files do not exist locally then they are downloaded
#           and unzipped. 
LoadData <- function() {
    
    if (!file.exists("summarySCC_PM25.rds") ||
            !file.exists("Source_Classification_Code.rds")) {
        
        if (!file.exists("FNEI_data.zip")) {
            print("Downloading FNEI_data.zip ...")
            download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip", 
                          "FNEI_data.zip", mode="wb")
            unzip("FNEI_data.zip")
        }
    }
    
    #Note: NEI and SCC are set in global environment
    if (!exists("NEI")) {
        print("Loading NEI data ...")
        NEI <<- as.data.table(readRDS("summarySCC_PM25.rds"))
    }
    if (!exists("SCC")) {
        print("Loading SCC data ...")
        SCC <<- as.data.table(readRDS("Source_Classification_Code.rds"))
    }
}


#plot3:     Plot a graph showing totoal PM 2.5 emissions 
#           by each source type of the Baltimore City, Maryland 
plot3 <- function() {
    LoadData() #NEI is now in global environment
    
    #get the sum of emissions by year and source type
    #for Baltimore City (fips=24510)    
    nei <- NEI[fips == "24510", sum(Emissions), by=list(type,year)]
    setnames(nei, 3, "total.emissions")
    
    #create and print the plot
    p <- qplot(year, total.emissions, data=nei, 
               color=type,
               geom=c("line"), method="lm",
               xlab = c("Year"), ylab = c("PM 2.5 Emissions (in tons)"),
               main = "Total PM 2.5 emissions of Baltimore City, Maryland by source type") +
        theme(plot.title = element_text(size = 16))
    print(p)
    
    #save the plot to png
    dev.copy(png, file="plot3.png", width=640, height=480)
    dev.off()
    
    #return the data to the caller
    nei
}

plot3()

